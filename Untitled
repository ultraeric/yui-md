 class Node:
     def __init__(self, neighbors=[], location=(-1, -1)):
        self.neighbors = neighbors
        self.location = location
        for node in neighbors:
            node.neighbors.append(self)


def find_objects(arr):
    nodes = []
    for row_i in range(len(arr)):
        for element_i in range(len(arr[row_i])):
            if arr[row_i][element_i]:
                neighbors = []
                if row_i > 0 and arr[row_i-1][element_i]:
                    neighbors.append(arr[row_i-1][element_i])
                if element_i > 0 and arr[row_i][element_i-1]:
                    neighbors.append(arr[row_i][element_i-1])
                arr[row_i][element_i] = Node(neighbors, (row_i, element_i))
                nodes.append(arr[row_i][element_i])
    object_roots = []
    while nodes:
        curr = nodes.pop()
        size = 1
        fringe = curr.neighbors[:]
        while fringe:
            curr_bfs_node = fringe.pop()
            for neighbor in curr_bfs_node.neighbors:
                if neighbor in nodes and node not in fringe:
                    fringe.append(neighbor)
            nodes.remove(curr_bfs_node)
            size += 1
        object_roots.append((curr, size))
    largest_obj = max(object_roots, key=lambda t: t[1])
    return len(object_roots), largest_obj[1], largest_obj[0].location
